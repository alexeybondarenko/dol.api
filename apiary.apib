FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# Dol - headless CMS

Dol provides an JSON API and management UI for content management.
Dol is intented to be lightweight and easy to install.

> "Dol" translates from the Sindarin as "Head". Sindarin is one of the many languages spoken by the immortal Elves.

## Features

- Two main content types: blog (series of posts) and static pages (JSON object with data for all content blocks of single page).
- Multilanguage content.
- Preview and schedule content publishing.
- Media Content Storage API via Google Cloud Storage Signed URL's.
- Attack SEO metadata to any content type.
- RSS feed for blogs.
- Sitemap generation.
<!-- - Review and rollback to any previous content revision.-->

## Complementary Services

- [Annon]()  API Gateway with [Mithril]() authorization provider can add a authorization on top of Dol API and other services in your project.
- [Man]() allows to render mustache or iex template to HTML or PDF based on JSON generated by Dol.
- [Ael]() can be used to allow front-end application to directly upload images to the Google Cloud Storage.

## Motivation

Most of CMS systems are too heavy to be used as part of modern front-end solutions.
Also it's hard to integrate custom front-ends into existing content management systems,
because they expect you to work with their metalanguages and dictate how you
structure, build, render and deploy your applications.

Instead it's desirable to have simple JSON API and management UI.

## Friends and Competitors

- [ButterCMS](https://buttercms.com/docs/api/?php#introduction)

## Configurations

Schema:

```
post_types: Array
  - [post type]:
      name: Name will be displayed in menu
      search: Array of fields that can be displayed in list page
        - [name of the field]: This field can be displayed in list page
      fields: Array of fileds for this post type
        - [field key]: Field key will be used as key of the object in public response.
            name: Name of the field. Can be used as a label of the field in admin
            description: description of the field. Can be used as placeholder or a caption of the field
            type: Type of the field. (`string`, `textarea`, `rich_text`, `select`, `image`, etc.)
            required: true/false
            values: Array of allowed values for select field
              - value: value of the item, eg. #00000
                name: name of the value, eg. Black
```

Example:

```
post_types:
  - testimonial:
      name: Testimonials
      search:
        - name
        - feedback
      fields:
        - rating:
            name: Rating
            description: Select one value from the list
            type: select
            required: true
            values:
              - value: 1
                name: 1
              - value: 2
                name: 2
              - value: 3
                name: 3
              - value: 4
                name: 4
              - value: 5
                name: 5
        - name:
            name: Name
            description: eg. John Smith
            type: string
            required: true
        - feedback:
            name: Feedback
            description: eg. Describe about customer experience
            type: textarea
            required: true
  - partner:
      name: Partners
      search:
        - name
      fields:
        - name:
            name: Name
            type: string
            required: true
        - logo:
            name: Logo
            type: image
            required: true
        - text:
            name: Text
            type: rich_text
            required: true
  - faq:
      name: FAQs
      search:
        - question
      fields:
        - question:
            name: Question
            type: string
            required: true
        - answer:
            name: Answer
            type: textarea
            required: true
  - blog:
      name: Blog
      search:
        - title
        - summary
      fields:
        - title:
            name: Title
            type: string
            required: true
        - summary:
            name: Summary
            type: textarea
            required: true
        - text:
            name: Text
            type: rich_text
            required: true
        - image:
            name: Image
            type: image
```

## Static Pages [/pages]

### List Pages [GET /pages{?status,locale,labels,limit,starting_after,ending_before}]

+ Parameters
    + status (`Content_Status`, optional) - Substring search for a title.
    + locale: en_US (string, optional) - Content locale.
    + labels: `label-name1,label-name2` (string, optional) - Label names to filter Blog Posts list.
    + limit: 20 (number, optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50.
    + starting_after: 56c31536a60ad644060041af (string, optional) - A cursor to fetch next page. Taken from collection response.
    + ending_before: 56c31536a60ad644060041aa (string, optional) - A cursor to fetch previous page. Taken from collection response.

+ Request (application/json)

+ Response 200 (application/json)
    + Attributes (Response_Collection)
        + data (array[`Page_Response`], fixed-type)

### Get Page by Slug [GET /pages/{slug}]

+ Parameters
    + slug: `some_folder/my_page` (string, required) - ID of a page.

+ Response 200 (application/json)
    + Attributes (Response_OK)
        + data (`Page_Response`)

### Create Page [POST /pages]

+ Request (application/json)
    + Attributes (object)
        + page (`Page_Request`)

+ Response 201 (application/json)
    + Headers

            Location: /some_folder/my_page

    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 201 (number)
        + data (`Page_Response`)

### Update Page [PATCH /pages{slug}]

+ Parameters
    + slug: `some_folder/my_page` (string, required) - ID of a page.

+ Request (application/json)
    + Attributes (object)
        + page (`Page_Request`)

+ Response 200 (application/json)
    + Attributes (Response_OK)
        + data (`Page_Response`)

### Delete Page [DELETE /pages{slug}]

+ Parameters
    + slug: `some_folder/my_page` (string, required) - ID of a page.

+ Request (application/json)
+ Response 204 (application/json)

### Get all defined Pages labels [GET /labels]

+ Request (application/json)
+ Response 200 (application/json)
    + Attributes (Response_OK)
        + data (array[string], fixed-type)
            + `group/new_site` (string, required)

## Content Blocks [/blocks]

### Add Content Block [POST]

+ Request (application/json)
    + Attributes (object)
        + block (`Page_Block`)

+ Response 200 (application/json)
    + Attributes (Response_OK)
        + data (`Page_Block`)

### Get Block by Name [GET /blocks/{name}]

+ Parameters
    + name: `testimonials` (string, required) - ID of a Block.

+ Request (application/json)
    + Attributes (object)
        + block (`Page_Block`)

+ Response 200 (application/json)
    + Attributes (Response_OK)
        + data (`Page_Block`)

### Create or Replace Content Block [PUT /blocks/{name}]

+ Parameters
    + name: `testimonials` (string, required) - Name of a content block.

+ Request (application/json)
    + Attributes (object)
        + block (`Page_Block`)

+ Response 200 (application/json)
    + Attributes (Response_OK)
        + data (`Page_Block`)

+ Response 201 (application/json)
    + Headers

            Location: /some_folder/my_page

    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 201 (number)
        + data (`Page_Block`)

### Delete Content Block [DELETE /blocks/{name}]

+ Parameters
    + name: `testimonials` (string, required) - Name of a content block.

+ Request (application/json)
+ Response 204 (application/json)

## Blog [/blog]

### List Posts [GET /blog/posts{?status,locale,title,body,author,labels,limit,starting_after,ending_before}]

+ Parameters
    + status (`Content_Status`, optional) - Substring search for a title.
    + locale: en_US (string, optional) - Content locale.
    + title: Signup (string, optional) - Substring search in a title.
    + body: Signup (string, optional) - Substring search in a title.
    + author: `tony` (string, required) - Any string that represents Blog Post author.
    + labels: `label-name1,label-name2` (string, optional) - Label names to filter Blog Posts list.
    + limit: 20 (number, optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50.
    + starting_after: 56c31536a60ad644060041af (string, optional) - A cursor to fetch next page. Taken from collection response.
    + ending_before: 56c31536a60ad644060041aa (string, optional) - A cursor to fetch previous page. Taken from collection response.

+ Request (application/json)

+ Response 200 (application/json)
    + Attributes (Response_Collection)
        + data (array[`Blog_Post_Response`], fixed-type)

### Create Blog Post [POST /blog/posts]

+ Request (application/json)
    + Attributes (object)
        + post (`Blog_Post_Request`)

+ Response 201 (application/json)
    + Headers

            Location: /blog/posts/my-first-post

    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 201 (number)
        + data (`Blog_Post_Response`)

### Get Blog Post by Slug [GET /blog/posts/{slug}]

+ Parameters
    + slug: `my-first-post` (string, required) - ID of a Blog Post.

+ Request (application/json)

+ Response 200 (application/json)
    + Attributes (Response_OK)
        + data (`Blog_Post_Response`)

### Create or Replace Blog Post [PUT /blog/posts/{slug}]

+ Parameters
    + slug: `my-first-post` (string, required) - ID of a Blog Post.

+ Request (application/json)
    + Attributes (object)
        + post (`Blog_Post_Request`)

+ Response 200 (application/json)
    + Attributes (Response_OK)
        + data (`Blog_Post_Response`)

+ Response 201 (application/json)
    + Headers

            Location: /blog/posts/my-first-post

    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 201 (number)
        + data (`Blog_Post_Response`)

### Update Blog Post [PATCH /blog/posts/{slug}]

+ Parameters
    + slug: `my-first-post` (string, required) - ID of a Blog Post.

+ Request (application/json)
    + Attributes (object)
        + post (`Blog_Post_Request`)

+ Response 200 (application/json)
    + Attributes (Response_OK)
        + data (`Blog_Post_Response`)

### Delete Blog Post [DELETE /blog/posts/{slug}]

+ Parameters
    + slug: `my-first-post` (string, required) - ID of a Blog Post.

+ Request (application/json)
+ Response 204 (application/json)

### Get all defined Blog Posts labels [GET /blog/labels]

+ Request (application/json)
+ Response 200 (application/json)
    + Attributes (Response_OK)
        + data (array[string], fixed-type)
            + `theme/marketing` (string, required)
            + `reviewed_by_me` (string, required)

## Post [/posts]

### List Posts [GET /posts{?type,limit,starting_after,ending_before}]

+ Parameters
    + type (`Post_Type`, optional) - Filter posts by the type.
    + limit: 20 (number, optional) - A limit on the number of objects to be returned, between 1 and 100. Default: 50.
    + starting_after: 56c31536a60ad644060041af (string, optional) - A cursor to fetch next page. Taken from collection response.
    + ending_before: 56c31536a60ad644060041aa (string, optional) - A cursor to fetch previous page. Taken from collection response.

+ Request (application/json)

+ Response 200 (application/json)
    + Attributes (Response_Collection)
        + data (array[`Post_Response`], fixed-type)

### Get Post By ID [GET /posts/{id}]

+ Parameters
    + id: `56c31536a60ad644060041aa` (string, required) - Post ID

+ Response 200 (application/json)
    + Attributes (Response_OK)
        + data (`Post_Response`)

### Create Post [POST /posts{?type}]

+ Parameters
    + type: `testimonial` (string, required) - Type of the creating post

+ Request (application/json)
    + Attributes (object)
        + post (`Post_Request`)

+ Response 201 (application/json)

        + Headers
            Location: /posts/56c31536a60ad644060041aa

    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 201 (number)
        + data (`Post_Response`)

### Update Post [PUT /posts/{id}]

+ Parameters
    + id: `56c31536a60ad644060041aa` (string, required) - Post ID

+ Request (application/json)
    + Attributes (object)
        + post (`Post_Request`)

+ Response 200 (application/json)
    + Attributes (Response_OK)
        + meta (Response__Meta)
            + code: 201 (number)
        + data (`Post_Response`)

### Delete Post [DELETE /posts/{id}]

+ Parameters
    + id: `56c31536a60ad644060041aa` (string, required) - Post ID

+ Request (application/json)
+ Response 204 (application/json)

## Types [/types]

### List Types [GET /types]

+ Request (application/json)
+ Response 200 (application/json)
    + Attributes (Response_Collection)
        + data (array[`Type`], fixed-type)

# Data Structures
## Responses
### `Response_Collection`
+ meta (Response__Meta, fixed-type)
+ data (array[], fixed-type)
+ paging (Response__Pagination, fixed-type)

### `Response_OK`
+ meta (Response__Meta, fixed-type)
+ data (object, fixed-type)

### `Response_Error`
+ meta (Response__Meta, fixed-type)
    + code: 400 (number)
+ error (Response__Error, fixed-type)

### `Response__Meta`
+ code: 200 (number) - HTTP response code.
+ url: http://example.com/resource (string) - URL to requested resource.
+ type (enum) - Type of data that is located in `data` attribute.
    - object (string) - `data` attribute is a JSON object.
    - list (string) - `data` attribute is a list.
+ code: 200 (number) - HTTP response code.
+ `idempotency_key`: `idemp-ssjssdjoa8308u0us0` (string, optional) - [Idempotency key](http://docs.apimanifest.apiary.io/#introduction/optional-features/idempotent-requests). Send it trough `X-Idempotency-Key` header.
+ `request_id`: `req-adasdoijasdojsda` (string) - [Request ID](http://docs.apimanifest.apiary.io/#introduction/interacting-with-api/request-id). Send it with `X-Request-ID` header.

### `Response__Error`
+ type: type_atom (string) - Atom that represents error type.
+ message: Error description (string) - Human-readable error message. This is for developers, not end-users.

### `Response__Error_DuplicateEntity`
+ type: `object_already_exists` (string) - Atom that represents error type.
+ message: This API already exists (string) - Human-readable error message. This is for developers, not end-users.

### `Response__Error_ValidationFailed`
+ type: validation_failed (string) - type of an error.
+ message: Validation failed. You can find validators description at our API Manifest: http://docs.apimanifest.apiary.io/#introduction/interacting-with-api/errors. (string)
+ invalid (array)
    + `entry_type`: `json_data_proprty` (string) - Type of error.
    + entry: $.cvv (string) - JSON Path to an invalid property.
    + rules (array)
        + rule: required (string) - String constant that represents validation rule type. List of all types can be found in [API Manifest](http://docs.apimanifest.apiary.io/#introduction/interacting-with-api/errors).
        + params (array) - Validation Parameters.

### `Response__Pagination`
+ limit: 20 (number) - A limit on the number of objects to be returned, between 1 and 100. Default: 50.
+ cursors (object)
    + `starting_after`: 56c31536a60ad644060041af (string) - A cursor for use in pagination. An object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    + `ending_before`: 56c31536a60ad644060041aa (string) - A cursor for use in pagination. An object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
+ size: 1000 (number) - Total number of objects in collection.
+ has_more: false (boolean) - Is this collection have more data to load in the same style as last request loaded it.

## Contents
### `Content_Request`
+ slug: `landing` (string, required) - ID of a content block.
+ status (Content_Status, required) - Content status.
+ labels (array[string], optional) - List of strings. Max length for element is 100 characters.
    + `group/emails` (string)
    + `action/signup` (string)
    + `other_tag` (string)

### `Content_Response` (`Content_Request`)
+ created_at: `2017-04-20T19:14:13Z` (string, required) - ISO 8601 date and time in UTC timezone.
+ updated_at: `2017-04-20T19:14:13Z` (string, required) - ISO 8601 date and time in UTC timezone.
+ published_at: `2017-04-20T19:14:13Z` (string, required) - ISO 8601 date and time in UTC timezone.

### `Content_Status` (enum)
+ draft (string) - Content is not published.
+ published (string) - Content visible in public API and in SEO-related objects.

### `Content_SEO`
+ seo (object, optional) - SEO-related information.
    + title: `My content title` (string, optional) - Page title for browsers and search engines.
    + `meta_description`: `This is an awesome page` (string, optional) - Page description that will be shown in search engines results.
    + `meta_robots_noindex`: false (boolean, optional)
    + `meta_robots_nofollow`: false (boolean, optional)
    + `linkdex` (string, optional)
    + `opengraph_title` (string, optional)
    + `opengraph_description` (string, optional)
    + `opengraph_image` (string, optional)
    + `twitter_title` (string, optional)
    + `twitter_description` (string, optional)
    + `twitter_image` (string, optional)
    + url: `http://example.com/` (string, optional) - Link to the user-facing page that will be used in sitemap generation.

## Types

### `Field`
+ name: `Rating` (string, required) - Name of the field. Can be used as a label of the input field.
+ key: `score` (string, required) - Field key
+ description: `Select score from 1 to 5`
+ type: `select` (string, required) - Type of the field
+ values (array, optional) - Items for select
    + value: 1
      name: 1
    + value: 2
      name: 2
    + value: 3
      name: 3
    + value: 4
      name: 4
    + value: 5
      name: 5
+ required: true (boolean, optional)

### `Type`

+ name: `testimonial` (string, required) - Name. Must be unique.
+ title: `Testimonials` (string, required) - Title of the PostType. Will be displayed in navigation.
+ search: `name`,`score` (array[string], required) - List of fields to be displayed in posts list table
+ fields (array[Field], required)

## Posts

###  `Fields`
+ name: `John Smith` (string)
+ score: 1 (number)
+ feedback: `Everything is Awesome!` (string)

### `Post_Type` (enum)
+ testimonial (string)
+ partner (string)
+ faq (string)

### `Post_Request`
+ type: `testimonial` (Post_Type, required) - Type of the post
+ fields (`Fields`, required) - Content of the post. Can be really different depends on the post type.

### `Post_Response` (`Post_Request`)
+ id: `56c31536a60ad644060041af` (string, required) - ID of the post
+ Include Content_SEO
+ created_at: `2017-04-20T19:14:13Z` (string, required) - ISO 8601 date and time in UTC timezone.
+ updated_at: `2017-04-20T19:14:13Z` (string, required) - ISO 8601 date and time in UTC timezone.

## Pages
### `Page_Request` (`Content_Request`)
+ included_blocks: testimonials,slogan,copyright (array[string], optional) - List of block names included in the Page.
+ payload (array[Page_Payload])
+ Include Content_Response

### `Page_Response` (`Page_Request`)
+ blocks (object) - All blocks will be object with `name` key
    + `block_one` (Page_Block, optional)
        + name: `block_one` (string)
    + `block_two` (Page_Block, optional)
        + name: `block_two` (string)

### `Page_Payload`
+ locale: en_US (string, required) - Content locale.
+ title: `Landing page` (string, required) - Name of a Page.
+ Include Content_SEO
+ Include Content_Response

### `Page_Block`
+ name: `testimonials` (string, required) - name of a content block.
+ type (enum, required)
    - collection (string) - Ordered list of objects. Testimonials, FAQs.
    - object (string) - Single object. Headlines, meta tags, paragraphs. Items locale are unique.
+ fields (array[`Page_Block_Fields`])
+ One of
    + `payloads` (array[`Page_Block_Payload`])
    + `payload` (array[`Page_Block_Payload`])

### `Page_Block_Fields`
+ name: username (string, required) - Field name.
+ type (enum, required) - Input type for field.
    - string (string)
    - textarea (string)
    - rich_text (string)
    - number (string)
    - email (string)
    - phone (string)
    - url (string)
    - boolean (string)
    - markdown (string)
    - page_slug (string)
    - json (string)

### `Page_Block_Payload`
+ locale: en_US (string, required) - Content locale.
+ username: John (string, required) - Field name and it's value.

## `Blog_Posts`
### `Blog_Post_Request` (`Content_Request`)
+ slug: `my-first-post` (string, required) - ID of a Blog Post.
+ author: `tony` (string, required) - Any string that represents Blog Post author.
+ payload (array[Blog_Post_Payload])

### `Blog_Post_Response` (`Blog_Post_Request`)
+ Include `Content_Response`

### `Blog_Post_Payload`
+ locale: en_US (string, required) - Content locale.
+ title: `My page title` (string, required)
+ body: `Long blog post description` (string, required) - Blog Post body, visible only when fetched by ID.
+ summary: `Shotened description` (string, required) - Shortened description that will be visible in list of blog posts.
+ `feature_image`: `http://storage.google.com/mybucket/my_first_post.jpeg` (string, required) - Link to a CDN-hosted featre image.
+ Include Content_SEO
